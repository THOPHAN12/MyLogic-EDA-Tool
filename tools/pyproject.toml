[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "mylogic-tools"
version = "2.0.0"
description = "Utility tools for MyLogic EDA Tool"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "MyLogic EDA Tool Team", email = "thophan12@example.com"}
]
keywords = [
    "eda",
    "electronic-design-automation",
    "vlsi",
    "circuit-analysis",
    "visualization",
    "format-conversion"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=3.0",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.950",
]
visualization = [
    "matplotlib>=3.5",
    "graphviz>=0.20",
]

[project.urls]
Homepage = "https://github.com/THOPHAN12/MyLogic-EDA-Tool"
Documentation = "https://github.com/THOPHAN12/MyLogic-EDA-Tool/tree/main/docs"
Repository = "https://github.com/THOPHAN12/MyLogic-EDA-Tool"
"Bug Tracker" = "https://github.com/THOPHAN12/MyLogic-EDA-Tool/issues"

[project.scripts]
mylogic-convert = "converters.convert_to_yosys_format:main"
mylogic-analyze = "analyzers.explain_cell_types:main"
mylogic-visualize = "visualizers.create_svg_from_json:main"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

